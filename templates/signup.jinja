<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}

{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="signup()">Sign up</button>

    <script>
        async function generateKeyPair() {
            const keyPair = await window.crypto.subtle.generateKey({
                name: "RSA-OAEP",
                modulusLength: 2048,   // Can be 1024, 2048, or 4096
                publicExponent: new Uint8Array([1, 0, 1]),  // 24-bit representation of 65537
                hash: {name: "SHA-256"}
            }, true, ["encrypt", "decrypt"]);
            return keyPair;
        }

        function spkiToPem(keyData) {
           
            let binary = '';
            const bytes = new Uint8Array(keyData);
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            const base64 = window.btoa(binary);
            return base64.match(/.{1,64}/g).join('\n') ;
        }

        async function savePrivateKey(privateKeyJwk) {
            const db = await openIndexedDB();
            const transaction = db.transaction('keys', 'readwrite');
            const store = transaction.objectStore('keys');
            const request = store.put({ id: 'privateKey', key: privateKeyJwk });

            return new Promise((resolve, reject) => {
                request.onsuccess = () => {
                    console.log("Private key saved successfully.");
                    db.close();
                    resolve(true);
                };

                request.onerror = (event) => {
                    console.error("Error saving private key:", event.target.error);
                    db.close();
                    reject(event.target.error);
                };
            });
        }


        async function signup() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            const salt = crypto.getRandomValues(new Uint8Array(16));
            const combined = new TextEncoder().encode(password + arrayBufferToBase64(salt));
            const hashBuffer = await crypto.subtle.digest('SHA-256', combined);
            const hashedPassword = arrayBufferToBase64(hashBuffer);

            const keyPair = await generateKeyPair();
            const publicKey = await window.crypto.subtle.exportKey("spki", keyPair.publicKey);
            const publicKeyPem = spkiToPem(publicKey);
            const privateKeyJwk = await window.crypto.subtle.exportKey("jwk", keyPair.privateKey);
            await savePrivateKey(privateKeyJwk);
            console.log("Private Key PEM:", privateKeyJwk);
            fetch("{{ url_for('signup_user') }}", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: username,
                    password: hashedPassword,
                    salt: arrayBufferToBase64(salt), 
                    publicKey: publicKeyPem
                })
            })
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok.');
                return response.json();  // This line assumes the response will always be JSON.
            })
            .then(data => {
                if (data.success) {
                    window.location.href = "{{ url_for('home', username=username) }}";
                } else {
                    alert("Error: " + data.error);
                }
            }).catch(error => {
                console.error('Error during registration:', error);
                alert('Registration failed');
            });
        }

        function arrayBufferToBase64(buffer) {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

        function openIndexedDB() {
            return new Promise((resolve, reject) => {
                const request = window.indexedDB.open('cryptoKeys', 1);
                request.onupgradeneeded = function(event) {
                    const db = event.target.result;
                    if (!db.objectStoreNames.contains('keys')) {
                        db.createObjectStore('keys', { keyPath: 'id' });
                    }
                };
                request.onerror = function(event) {
                    console.error("Database error: " + event.target.errorCode);
                    reject(event.target.error);
                };
                request.onsuccess = function(event) {
                    resolve(event.target.result);
                };
            });
        }

    </script>
{% endblock %}
